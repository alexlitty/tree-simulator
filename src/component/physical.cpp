#include <component/physical.hpp>
#include <math/constant.hpp>
#include <math/geometry.hpp>
#include <math/vector.hpp>

// Constructor.
tree::physical::physical()
: m_rotation(0),
  mass(0),
  rotation_speed(0),
  rotation_speed_max(0),
  rotation_acceleration(0)
{
    
}

// Retrieves the graphical transformation caused by physics.
const sf::Transform& tree::physical::get_physical_transform() const
{
    return m_physical_transform.getTransform();
}

// Allows time to pass, letting physics change this object.
void tree::physical::pass_time(float seconds, std::vector<physical*>& objects)
{
    sf::Vector2f gravity;
    float force, magnitude, distance;

    // Position.
    sf::Vector2f delta(acceleration.x * seconds,
                       acceleration.y * seconds);
    velocity += delta;
    move(velocity);

    // Rotation.
    magnitude = rotation_acceleration * seconds;
    rotation_speed += magnitude;
    rotate(rotation_speed);

    // Influence of other objects.
    for (uint32_t i = 0; i < objects.size(); i++) {
        physical* object = objects[i];

        // Don't influence self.
        if (object == this) {
            continue;
        }

        // Gravitational pull.
        if (mass > 0 && object->mass > 0) {

            // Calculate force generated by other object.
            distance = math::distance(get_position(), object->get_position());
            force = (math::gravitational_constant * mass * object->mass);
            force /= std::pow(distance, 2);
            magnitude = force / mass;

            // Pull towards other object.
            gravity = math::set_magnitude(
                object->get_position() - get_position(),
                magnitude);
            velocity += gravity;
        }
    }
}

// Move this object relative to its current position.
void tree::physical::move(sf::Vector2f& vector)
{
    sf::Vector2f result = get_position() + vector;
    set_position(result);
}

// Gets position.
sf::Vector2f tree::physical::get_position() const
{
    return m_position;
}

// Sets position.
void tree::physical::set_position(sf::Vector2f& position)
{
    m_position = position;
    m_physical_transform.setPosition(position);
}

// Gets rotation.
float tree::physical::get_rotation() const
{
    return m_rotation;
}

// Sets rotation.
void tree::physical::set_rotation(float magnitude)
{
    m_rotation = magnitude;
    m_physical_transform.setRotation(magnitude);
}

// Perform rotation.
void tree::physical::rotate(float magnitude)
{
    set_rotation(get_rotation() + magnitude);
}
