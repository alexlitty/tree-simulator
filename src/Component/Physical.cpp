#include <tree/Component/Physical.hpp>
#include <tree/Math/Constant.hpp>
#include <tree/Math/Geometry.hpp>
#include <tree/Math/Vector.hpp>

// Constructor.
tree::Physical::Physical()
: m_rotation(0),
  mass(0),
  rotationSpeed(0),
  rotationSpeedMax(0),
  rotationAcceleration(0)
{
    
}

// Retrieves the graphical transformation caused by physics.
const sf::Transform& tree::Physical::getPhysicalTransform() const
{
    return m_physicalTransform.getTransform();
}

// Allows time to pass, letting physics change this object.
void tree::Physical::passTime(float seconds, std::vector<Physical*>& objects)
{
    sf::Vector2f gravity;
    float force, magnitude, distance;

    // Position.
    sf::Vector2f delta(acceleration.x * seconds,
                       acceleration.y * seconds);
    velocity += delta;
    move(velocity);

    // Rotation.
    magnitude = rotationAcceleration * seconds;
    rotationSpeed += magnitude;
    rotate(rotationSpeed);

    // Influence of other objects.
    for (uint32_t i = 0; i < objects.size(); i++) {
        Physical* object = objects[i];

        // Don't influence self.
        if (object == this) {
            continue;
        }

        // Gravitational pull.
        if (mass > 0 && object->mass > 0) {

            // Calculate force generated by other object.
            distance = Math::distance(getPosition(), object->getPosition());
            force = (Math::GRAVITATIONAL * mass * object->mass);
            force /= std::pow(distance, 2);
            magnitude = force / mass;

            // Pull towards other object.
            gravity = Math::setMagnitude(
                object->getPosition() - getPosition(),
                magnitude);
            velocity += gravity;
        }
    }
}

// Move this object relative to its current position.
void tree::Physical::move(sf::Vector2f& vector)
{
    sf::Vector2f result = getPosition() + vector;
    setPosition(result);
}

// Gets position.
sf::Vector2f tree::Physical::getPosition() const
{
    return m_position;
}

// Sets position.
void tree::Physical::setPosition(sf::Vector2f& position)
{
    m_position = position;
    m_physicalTransform.setPosition(position);
}

// Gets rotation.
float tree::Physical::getRotation() const
{
    return m_rotation;
}

// Sets rotation.
void tree::Physical::setRotation(float magnitude)
{
    m_rotation = magnitude;
    m_physicalTransform.setRotation(magnitude);
}

// Perform rotation.
void tree::Physical::rotate(float magnitude)
{
    setRotation(getRotation() + magnitude);
}
